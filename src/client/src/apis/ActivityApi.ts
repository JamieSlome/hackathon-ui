/* tslint:disable */
/* eslint-disable */
/**
 * People in Need - Springboard Service
 * This backend is meant to be a simple CRUD service for supporting  collaboration between organizations and the beneficiaries supported by them.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Activity,
  ActivityCreationRequest,
  ActivityStatus,
} from '../models/index';
import {
    ActivityFromJSON,
    ActivityToJSON,
    ActivityCreationRequestFromJSON,
    ActivityCreationRequestToJSON,
    ActivityStatusFromJSON,
    ActivityStatusToJSON,
} from '../models/index';

export interface CreateActivityRequest {
    activityCreationRequest: ActivityCreationRequest;
}

export interface FindActivityRequest {
    id: string;
}

export interface ListActivitiesRequest {
    status?: ActivityStatus;
    organizationId?: string;
    beneficiaryId?: string;
    needId?: string;
}

/**
 * ActivityApi - interface
 * 
 * @export
 * @interface ActivityApiInterface
 */
export interface ActivityApiInterface {
    /**
     * Create an activity. 
     * @summary Create an activity.
     * @param {ActivityCreationRequest} activityCreationRequest Activity to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    createActivityRaw(requestParameters: CreateActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>>;

    /**
     * Create an activity. 
     * Create an activity.
     */
    createActivity(requestParameters: CreateActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity>;

    /**
     * Retrieve an activity based on id. 
     * @summary Retrieve an activity.
     * @param {string} id Activity identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    findActivityRaw(requestParameters: FindActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>>;

    /**
     * Retrieve an activity based on id. 
     * Retrieve an activity.
     */
    findActivity(requestParameters: FindActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity>;

    /**
     * Retrieve a list of all activities currently tracked. 
     * @summary List all activities.
     * @param {ActivityStatus} [status] Activity status
     * @param {string} [organizationId] Organization identifier
     * @param {string} [beneficiaryId] Beneficiary identifier
     * @param {string} [needId] Need identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApiInterface
     */
    listActivitiesRaw(requestParameters: ListActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Activity>>>;

    /**
     * Retrieve a list of all activities currently tracked. 
     * List all activities.
     */
    listActivities(requestParameters: ListActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Activity>>;

}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI implements ActivityApiInterface {

    /**
     * Create an activity. 
     * Create an activity.
     */
    async createActivityRaw(requestParameters: CreateActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activityCreationRequest === null || requestParameters.activityCreationRequest === undefined) {
            throw new runtime.RequiredError('activityCreationRequest','Required parameter requestParameters.activityCreationRequest was null or undefined when calling createActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/activities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivityCreationRequestToJSON(requestParameters.activityCreationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * Create an activity. 
     * Create an activity.
     */
    async createActivity(requestParameters: CreateActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.createActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an activity based on id. 
     * Retrieve an activity.
     */
    async findActivityRaw(requestParameters: FindActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * Retrieve an activity based on id. 
     * Retrieve an activity.
     */
    async findActivity(requestParameters: FindActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.findActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all activities currently tracked. 
     * List all activities.
     */
    async listActivitiesRaw(requestParameters: ListActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Activity>>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.beneficiaryId !== undefined) {
            queryParameters['beneficiaryId'] = requestParameters.beneficiaryId;
        }

        if (requestParameters.needId !== undefined) {
            queryParameters['needId'] = requestParameters.needId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityFromJSON));
    }

    /**
     * Retrieve a list of all activities currently tracked. 
     * List all activities.
     */
    async listActivities(requestParameters: ListActivitiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Activity>> {
        const response = await this.listActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
