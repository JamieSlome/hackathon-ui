import Highcharts, { FormatterCallbackFunction } from "highcharts";
import { Beneficiary, Organization } from "../../client/src";
import { ageRanges } from "../beneficiaries/Table";
import pictorialjs from "highcharts/modules/pictorial.js";

pictorialjs(Highcharts);
// Custom template helper
Highcharts.Templating.helpers.abs = (value) => Math.abs(value);

export const getAgeGroupIndex = (age: number): number => {
  return ageRanges.findIndex((group) => {
    return age >= group.min && age <= group.max;
  });
};

export interface BarSeries {
  name: string;
  data: number[];
}

export interface PieSeries {
  name: string;
  data: { name: string; y: number }[];
  innerSize?: string;
}

export interface PictorialSeries {
  name: string;
  data: number[];
  count: number;
}

export interface ComparisonChartProps {
  categories: string[];
  positiveSeries: BarSeries;
  negativeSeries: BarSeries;
  title: string;
}

export interface DemographicChartProps {
  categories: string[];
  series: PieSeries;
  title: string;
}

export const getNeedCount = (
  needId: string,
  beneficiaries: Beneficiary[],
  organizations: Organization[]
) => {
  const organizationCount = organizations.filter((organization) =>
    organization.needs?.includes(needId)
  ).length;
  const beneficiaryCount = beneficiaries.filter((beneficiary) =>
    beneficiary.needs?.includes(needId)
  ).length;
  return {
    organizationCount,
    beneficiaryCount,
  };
};

export const getNegativeBarConfig = ({
  title,
  categories,
  positiveSeries,
  negativeSeries,
}: ComparisonChartProps) => {
  return {
    chart: {
      type: "bar",
    },
    title: {
      text: title,
    },
    xAxis: [
      {
        categories: categories,
        reversed: false,
        labels: {
          step: 1,
        },
      },
      {
        // mirror axis on right side
        opposite: true,
        reversed: false,
        categories: categories,
        linkedTo: 0,
        labels: {
          step: 1,
        },
      },
    ],
    yAxis: {
      title: {
        text: null,
      },
      labels: {
        format: "{abs value}",
      },
    },

    plotOptions: {
      series: {
        stacking: "normal",
        borderRadius: "50%",
      },
    },
    tooltip: {
      format: "<b>{series.name}, {point.category}</b><br/>" + "{(abs point.y)}",
    },
    credits: {
      enabled: false,
    },
    series: [negativeSeries, positiveSeries],
  };
};

export const getDemographicsConfig = ({
  title,
  categories,
  series,
}: DemographicChartProps) => ({
  chart: {
    type: "pie",
  },
  title: {
    text: title,
  },
  xAxis: {
    categories,
  },
  yAxis: {
    title: {
      text: "Population",
    },
  },
  plotOptions: {
    pie: {
      size: 200,
      dataLabels: {
        formatter: function () {
          return (
            `<b>Age: ${this.point.name}</b>` +
            ": " +
            Highcharts.numberFormat(this.point.percentage, 1) +
            " %"
          );
        } as FormatterCallbackFunction<Highcharts.Point>,
      },
    },
  },
  credits: {
    enabled: false,
  },
  tooltip: {
    format: "<b>{point.name}</b>: " + "{(abs point.y)}",
  },
  series: [series],
});

export const getOutcomesConfig = (series: PictorialSeries[]) => ({
  chart: {
    type: "pictorial",
  },
  title: {
    text: "Program Outcomes",
  },
  xAxis: {
    lineWidth: 0,
    opposite: true,
    labels: {
      style: {
        display: "none",
      },
    },
  },
  yAxis: {
    visible: false,
    stackShadow: {
      enabled: true,
    },
    max: 100,
  },
  legend: {
    itemMarginTop: 15,
    itemMarginBottom: 15,
    layout: "vertical",
    padding: 0,
    verticalAlign: "middle",
    align: "right",
    margin: 0,
  },

  tooltip: {
    headerFormat: "",
  },
  plotOptions: {
    series: {
      pointPadding: 0,
      groupPadding: 0,
      dataLabels: {
        enabled: true,
        align: "center",
        format: "{y} %",
      },
      stacking: "normal",
      paths: [
        {
          definition:
            "m 656.59433,740.097 c -0.634,-1.435 -13.566,-15.425 -33.487,-23.292 -4.568,-1.94 -4.545,2.705 -16.944,-34.925 -26.957,-72.647 -5.661,-112.736 -51.135,-200.791 -6.888,-14.322 -9.901,-24.921 -16.16,-50.12 -25.397,-104.478 -6.032,-90.98 -15.87,-135.251 -17.961,-63.049 -50.754,-59.498 -71.782,-59.155 -16.944,0.378 -45.224,-11.699 -52.936,-19.746 -10.555,-11.486 -17.912,-20.548 -11.679,-58.855 0,0 7.037,-12.141 9.078,-34.125 9.284,11.287 24.572,-33.84 16.065,-42.691 -1.745,-1.867 -5.169,-1.236 -6.289,1.015 -1.292,1.484 -1.315,3.695 -2.888,4.964 -2,-9.359 3.289,-28.498 -7.935,-56.968 -5.541,-12.289 -11.235,-15.496 -21.547,-22.44 -8.401,-6.048 -28.842,-7.595 -29.842,-7.717 h -9.461 c -1,0.122 -21.441,1.669 -29.842,7.717 -10.312,6.944 -16.006,10.151 -21.547,22.44 -11.224,28.47 -5.935,47.609 -7.935,56.968 -1.573,-1.269 -1.596,-3.48 -2.888,-4.964 -1.12,-2.251 -4.544,-2.882 -6.289,-1.015 -8.507,8.851 6.781,53.978 16.065,42.691 2.041,21.984 9.078,34.125 9.078,34.125 6.233,38.307 -1.124,47.369 -11.679,58.855 -7.712,8.047 -35.992,20.124 -52.935,19.746 -21.029,-0.343 -53.822,-3.894 -71.782,59.155 -9.838,44.271 9.527,30.773 -15.87,135.251 -6.259,25.199 -9.272,35.798 -16.16,50.12 -45.474004,88.055 -24.178004,128.144 -51.135004,200.791 -12.399,37.63 -12.376,32.985 -16.944,34.925 -19.921,7.867 -32.853,21.857 -33.487,23.292 -8.923,20.454 -23.3280004,27.412 -19.92100038,33.844 0.89599998,1.702 3.31799998,2.588 4.94399998,1.381 5.1890004,0.91 12.7380004,-4.808 16.1270004,-8.599 4.102,-4.706 3.375,-7.457 11.332,-13.86 1.824,2.047 -2.155,20.335 -3.12,23.398 -4.877,14.729 -26.5670004,49.619 -17.595,54.417 0.945,0.4 2.227,0.955 3.073,0.089 1.553,-1.53 3.53,-2.604 4.841,-4.372 8.025,-10.218 17.566,-34.36 24.059,-39.238 3.279,0.224 1.596,2.346 -4.475,22.532 -3.673,13.084 -5.142,19.941 -5.142,19.941 -10.126,30.466 6.229,25.716 11.501,6.808 0.448,-1.537 9.722,-26.912 10.129,-28.16 1.241,-3.291 4.602,-17.806 8.801,-14.872 0.646,2.469 -0.335,3.044 -3.536,31.521 -2.6,21.813 -3.236,8.789 -2.713,26.425 0.079,2.164 4.439,3.257 6.282,2.115 10.539,-9.723 12.692,-57.611 18.074,-61.022 3.669,4.293 4.272,33.754 5.982,39.221 2.652,9.705 7.446,4.802 7.981,3.239 3.825004,-9.324 -0.19,-30.536 0.628,-45.388 0,0 4.369004,-14.53 7.198004,-38.676 4.176,-45.514 -17.861004,13.267 48.59,-167.185 0,0 5.299,-10.218 13.794,-30.791 9.81,-21.31 5.988,-35.652 19.766,-73.451 0.361,-1 16.239,-47.758 24.363,-68.15 45.673,232.645 -9.743,77.068 -28.904,331.531 -5.708,105.042 1.862,76.707 18.19,223.544 31.719,289.304 -15.087,130.161 35.652,384.312 10.99,51.495 9.837,44.86 11.854,56.284 2.28,21.363 -1.788,21.528 -1.679,31.313 -0.699,24.031 5.964,8.574 -1.712,52.53 -4.993,24.181 -4.913,9.214 -7.677,37.417 -3.463,13.977 -13.912,52.732 0.856,52.45 1.286,7.64 5.541,9.156 9.756,6.712 -0.684,2.455 1.381,4.293 2.766,6.011 4.813,1.322 4.76,1.029 6.828,-0.555 1.495,5.791 5.173,5.742 6.748,6.16 4.768,1.476 5.904,-11.237 6.781,-16.16 0.856,-0.046 1.705,-0.096 2.551,-0.129 -1.072,3.151 -7.161,15.833 2.634,16.835 7.651,1.238 8.542,0.168 12.727,-3.791 6.992,-7.01 5.41,-8.94 6.623,-20.685 0.191,-2.384 5.685,-6.58 0.872,-37.642 -1.855,-15.952 -0.832,2.69 0.304,-35.715 0.371,-16.594 5.685,-19.576 6.408,-31.349 -6.493,-27.396 -1.465,-14.55 -4.045,-30.51 -6.145,-34.313 -7.105,-27.255 0.575,-107.316 6.987,-65.839 14.147,-68.677 7.72,-136.864 -14.296,-110.15 -0.224,-68.945 1.451,-126.216 1.503,-67.36 -4.198,-108.808 3.103,-168.203 4.314,-34.735 12.351,-68.835 12.215,-90.227 2.948,-3.639 4.984,-7.885 7.168,-11.993 3.172,-6.203 2.655,-0.513 2.627,-35.675 1.424,-0.218 2.885,-0.281 4.27,-0.677 0.162,-0.334 0.307,-0.661 0.436,-0.985 0.007,0.007 0.014,0.015 0.022,0.023 0.008,-0.008 0.015,-0.016 0.022,-0.023 0.129,0.324 0.274,0.651 0.436,0.985 1.385,0.396 2.846,0.459 4.27,0.677 -0.028,35.162 -0.545,29.472 2.627,35.675 2.184,4.108 4.22,8.354 7.168,11.993 -0.136,21.392 7.901,55.493 12.215,90.227 7.301,59.394 1.6,100.842 3.103,168.203 1.675,57.27 15.747,16.066 1.451,126.216 -6.427,68.186 0.733,71.025 7.72,136.864 7.68,80.061 6.72,73.003 0.575,107.316 -2.58,15.96 2.448,3.114 -4.045,30.51 0.723,11.773 6.037,14.755 6.408,31.349 1.136,38.405 2.159,19.763 0.304,35.715 -4.813,31.062 0.681,35.258 0.872,37.642 1.213,11.745 -0.369,13.675 6.623,20.685 4.185,3.959 5.076,5.029 12.727,3.791 9.795,-1.002 3.706,-13.684 2.634,-16.835 0.846,0.033 1.695,0.083 2.551,0.129 0.877,4.923 2.013,17.636 6.781,16.16 1.575,-0.418 5.253,-0.369 6.748,-6.16 2.068,1.584 2.015,1.877 6.828,0.555 1.385,-1.718 3.45,-3.556 2.766,-6.011 4.215,2.444 8.47,0.928 9.756,-6.712 14.768,0.282 4.319,-38.473 0.856,-52.45 -2.764,-28.203 -2.684,-13.236 -7.677,-37.417 -7.676,-43.956 -1.013,-28.499 -1.712,-52.53 0.109,-9.785 -3.959,-9.95 -1.679,-31.313 2.017,-11.424 0.864,-4.789 11.854,-56.284 50.739,-254.151 3.933,-95.007 35.652,-384.312 16.328,-146.837 23.898,-118.502 18.19,-223.544 -19.161,-254.463 -74.576,-98.886 -28.904,-331.531 8.124,20.392 24.002,67.15 24.363,68.15 13.778,37.8 9.956,52.142 19.766,73.451 8.495,20.573 13.794,30.791 13.794,30.791 66.451,180.451 44.414,121.671 48.59,167.185 2.829,24.146 7.198,38.676 7.198,38.676 0.818,14.852 -3.197,36.064 0.628,45.388 0.535,1.563 5.329,6.466 7.981,-3.239 1.71,-5.467 2.313,-34.928 5.982,-39.221 5.382,3.411 7.535,51.3 18.074,61.022 1.843,1.142 6.203,0.049 6.282,-2.115 0.523,-17.636 -0.113,-4.612 -2.713,-26.425 -3.201,-28.477 -4.182,-29.052 -3.536,-31.521 4.199,-2.934 7.56,11.581 8.801,14.872 0.407,1.248 9.681,26.623 10.129,28.16 5.272,18.908 21.627,23.658 11.501,-6.808 0,0 -1.469,-6.857 -5.142,-19.941 -6.071,-20.186 -7.754,-22.308 -4.475,-22.532 6.493,4.878 16.034,29.02 24.059,39.238 1.311,1.768 3.288,2.842 4.841,4.372 0.846,0.866 2.128,0.311 3.073,-0.089 8.972,-4.798 -12.718,-39.688 -17.595,-54.417 -0.965,-3.063 -4.944,-21.351 -3.12,-23.398 7.957,6.403 7.23,9.154 11.332,13.86 3.389,3.791 10.938,9.509 16.127,8.599 1.626,1.207 4.048,0.321 4.944,-1.381 3.403,-6.432 -11.002,-13.39 -19.925,-33.844 z",
        },
      ],
    },
  },
  series,
  credits: {
    enabled: false,
  },
  responsive: {
    rules: [
      {
        condition: {
          maxWidth: 500,
        },
        chartOptions: {
          legend: {
            padding: 8,
            margin: 8,
            itemMarginTop: 8,
            itemMarginBottom: 0,
            verticalAlign: "bottom",
            layout: "horizontal",
          },
        },
      },
      {
        condition: {
          maxWidth: 400,
        },
        chartOptions: {
          legend: {
            layout: "vertical",
          },
        },
      },
    ],
  },
});
